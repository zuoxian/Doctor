package com.yjm.doctor.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yjm.doctor.model.MemberDoctor;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEMBER_DOCTOR".
*/
public class MemberDoctorDao extends AbstractDao<MemberDoctor, Integer> {

    public static final String TABLENAME = "MEMBER_DOCTOR";

    /**
     * Properties of entity MemberDoctor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", true, "ID");
        public final static Property CreateTime = new Property(1, String.class, "createTime", false, "CREATE_TIME");
        public final static Property Department = new Property(2, int.class, "department", false, "DEPARTMENT");
        public final static Property DepartmentName = new Property(3, String.class, "departmentName", false, "DEPARTMENT_NAME");
        public final static Property Education = new Property(4, String.class, "education", false, "EDUCATION");
        public final static Property EducationName = new Property(5, String.class, "educationName", false, "EDUCATION_NAME");
        public final static Property GroupId = new Property(6, int.class, "groupId", false, "GROUP_ID");
        public final static Property Hospital = new Property(7, int.class, "hospital", false, "HOSPITAL");
        public final static Property HospitalName = new Property(8, String.class, "hospitalName", false, "HOSPITAL_NAME");
        public final static Property Introduce = new Property(9, String.class, "introduce", false, "INTRODUCE");
        public final static Property Leader = new Property(10, boolean.class, "leader", false, "LEADER");
        public final static Property Level = new Property(11, int.class, "level", false, "LEVEL");
        public final static Property LevelName = new Property(12, String.class, "levelName", false, "LEVEL_NAME");
        public final static Property Sort = new Property(13, int.class, "sort", false, "SORT");
        public final static Property Speciality = new Property(14, String.class, "speciality", false, "SPECIALITY");
        public final static Property UpdateTime = new Property(15, String.class, "updateTime", false, "UPDATE_TIME");
    }


    public MemberDoctorDao(DaoConfig config) {
        super(config);
    }
    
    public MemberDoctorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEMBER_DOCTOR\" (" + //
                "\"ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"CREATE_TIME\" TEXT," + // 1: createTime
                "\"DEPARTMENT\" INTEGER NOT NULL ," + // 2: department
                "\"DEPARTMENT_NAME\" TEXT," + // 3: departmentName
                "\"EDUCATION\" TEXT," + // 4: education
                "\"EDUCATION_NAME\" TEXT," + // 5: educationName
                "\"GROUP_ID\" INTEGER NOT NULL ," + // 6: groupId
                "\"HOSPITAL\" INTEGER NOT NULL ," + // 7: hospital
                "\"HOSPITAL_NAME\" TEXT," + // 8: hospitalName
                "\"INTRODUCE\" TEXT," + // 9: introduce
                "\"LEADER\" INTEGER NOT NULL ," + // 10: leader
                "\"LEVEL\" INTEGER NOT NULL ," + // 11: level
                "\"LEVEL_NAME\" TEXT," + // 12: levelName
                "\"SORT\" INTEGER NOT NULL ," + // 13: sort
                "\"SPECIALITY\" TEXT," + // 14: speciality
                "\"UPDATE_TIME\" TEXT);"); // 15: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEMBER_DOCTOR\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MemberDoctor entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(2, createTime);
        }
        stmt.bindLong(3, entity.getDepartment());
 
        String departmentName = entity.getDepartmentName();
        if (departmentName != null) {
            stmt.bindString(4, departmentName);
        }
 
        String education = entity.getEducation();
        if (education != null) {
            stmt.bindString(5, education);
        }
 
        String educationName = entity.getEducationName();
        if (educationName != null) {
            stmt.bindString(6, educationName);
        }
        stmt.bindLong(7, entity.getGroupId());
        stmt.bindLong(8, entity.getHospital());
 
        String hospitalName = entity.getHospitalName();
        if (hospitalName != null) {
            stmt.bindString(9, hospitalName);
        }
 
        String introduce = entity.getIntroduce();
        if (introduce != null) {
            stmt.bindString(10, introduce);
        }
        stmt.bindLong(11, entity.getLeader() ? 1L: 0L);
        stmt.bindLong(12, entity.getLevel());
 
        String levelName = entity.getLevelName();
        if (levelName != null) {
            stmt.bindString(13, levelName);
        }
        stmt.bindLong(14, entity.getSort());
 
        String speciality = entity.getSpeciality();
        if (speciality != null) {
            stmt.bindString(15, speciality);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(16, updateTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MemberDoctor entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(2, createTime);
        }
        stmt.bindLong(3, entity.getDepartment());
 
        String departmentName = entity.getDepartmentName();
        if (departmentName != null) {
            stmt.bindString(4, departmentName);
        }
 
        String education = entity.getEducation();
        if (education != null) {
            stmt.bindString(5, education);
        }
 
        String educationName = entity.getEducationName();
        if (educationName != null) {
            stmt.bindString(6, educationName);
        }
        stmt.bindLong(7, entity.getGroupId());
        stmt.bindLong(8, entity.getHospital());
 
        String hospitalName = entity.getHospitalName();
        if (hospitalName != null) {
            stmt.bindString(9, hospitalName);
        }
 
        String introduce = entity.getIntroduce();
        if (introduce != null) {
            stmt.bindString(10, introduce);
        }
        stmt.bindLong(11, entity.getLeader() ? 1L: 0L);
        stmt.bindLong(12, entity.getLevel());
 
        String levelName = entity.getLevelName();
        if (levelName != null) {
            stmt.bindString(13, levelName);
        }
        stmt.bindLong(14, entity.getSort());
 
        String speciality = entity.getSpeciality();
        if (speciality != null) {
            stmt.bindString(15, speciality);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(16, updateTime);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public MemberDoctor readEntity(Cursor cursor, int offset) {
        MemberDoctor entity = new MemberDoctor( //
            cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // createTime
            cursor.getInt(offset + 2), // department
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // departmentName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // education
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // educationName
            cursor.getInt(offset + 6), // groupId
            cursor.getInt(offset + 7), // hospital
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // hospitalName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // introduce
            cursor.getShort(offset + 10) != 0, // leader
            cursor.getInt(offset + 11), // level
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // levelName
            cursor.getInt(offset + 13), // sort
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // speciality
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // updateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MemberDoctor entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setCreateTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDepartment(cursor.getInt(offset + 2));
        entity.setDepartmentName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEducation(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEducationName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGroupId(cursor.getInt(offset + 6));
        entity.setHospital(cursor.getInt(offset + 7));
        entity.setHospitalName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIntroduce(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLeader(cursor.getShort(offset + 10) != 0);
        entity.setLevel(cursor.getInt(offset + 11));
        entity.setLevelName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSort(cursor.getInt(offset + 13));
        entity.setSpeciality(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setUpdateTime(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(MemberDoctor entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public Integer getKey(MemberDoctor entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MemberDoctor entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
